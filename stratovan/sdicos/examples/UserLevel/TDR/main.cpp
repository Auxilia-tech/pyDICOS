//////////////////////////////////////////////////////////////////////////////
/// Stratovan Corporation Copyright and Disclaimer Notice:
///
/// Copyright (c) 2014 Stratovan Corporation. All Rights Reserved.
///
/// Permission to use, copy, modify, and distribute this software and its
/// documentation without a signed licensing agreement, is hereby granted,
/// provided that this copyright notice, this paragraph and the following two
/// paragraphs appear in all copies, modifications, and distributions.
///
/// IN NO EVENT SHALL STRATOVAN BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
/// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
/// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
/// STRATOVAN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///
/// STRATOVAN SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED
/// TO, THE IMPLIED WARRANTIES OF USE AND FITNESS FOR A PARTICULAR PURPOSE. THE
/// SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS
/// PROVIDED "AS IS". STRATOVAN HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
/// SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS UNLESS DIRECTED BY THE
/// U.S. GOVERNMENT'S TRANSPORTATION SECURITY ADMINISTRATION (TSA).
///
//////////////////////////////////////////////////////////////////////////////
/// StartCreateTDRExamples

#include "SDICOS/DICOS.h"

/// StartCreateTDRForBaggageSimpleNoThreat
/**
 Create a Threat Detection Report (TDR) generated from an ATR device
 for a piece of baggage with no Potential Threat Objects (PTO).
 */
bool CreateNoThreatTDRForBaggageSimple()
{
	/// Identifier for the TDR
	SDICOS::S_INT32 TDRInstanceNumber = 1234;
		
	/// The SDICOS.TemplateTDR.TDR object represents a TDR for a single Object Of Inspection (OOI)
	/// Create a Threat Detection Report (TDR) DICOS file for a piece of Baggage generated by an Automated Threat Recognition (ATR) Device.
	SDICOS::TDR tdr(
		SDICOS::ObjectOfInspectionModule::enumTypeBaggage,		// OOI is a piece of Baggage
		SDICOS::TDRTypes::ThreatDetectionReport::enumMachine,	// TDR was generated by an ATR machine
		TDRInstanceNumber	// Numeric identifier for the TDR
	);

	// Indicate the Date and Time TDR was created
	SDICOS::DcsDate TDRCreationStartDate = SDICOS::DcsDate::Today();
	SDICOS::DcsTime TDRCreationStartTime = SDICOS::DcsTime::Now();
	
	tdr.SetContentDateAndTime(TDRCreationStartDate,TDRCreationStartTime);

	// Set ATR Device information. Required by DICOS when TDR type is enumMachine
	SDICOS::DcsLongString atrManufacturer("Alchemy");
	SDICOS::DcsLongString atrVersion("0.999");
	
	//
	// Indicate parameters used to the initialize and run the ATR algorithm.
	// In this example, the ATR algorithm has two parameters.
	//
	SDICOS::Array1D<SDICOS::DcsLongString> ATR_Parameters(2);
	ATR_Parameters[0] = "-random=true";
	ATR_Parameters[1] = "-magic=true";
	tdr.SetTDRTypeATR(atrManufacturer,atrVersion,ATR_Parameters);
		
	// Image scaling factor is required for TDR Type = ATR
	// Indicate number of units on the 'human' that 1 unit in the image maps to.
	tdr.SetImageScaleRepresentation(10.0);
	
	// Indicate that an alarm was triggered
	tdr.SetAlarmDecision(SDICOS::TDRTypes::ThreatDetectionReport::enumClear);
	SDICOS::DcsDate alarmDecisionDate(1944,6,6);
	SDICOS::DcsTime alarmDecisionTime(6,30,0,0);
	tdr.SetAlarmDecisionDateTime(alarmDecisionDate,alarmDecisionTime);
		
	// The TDR generation succeeded
	tdr.SetAbortFlag(SDICOS::TDRTypes::ThreatDetectionReport::enumSuccess);

	//Add reference to a scan when no PTO is generated. For this example, dummy UIDs are generated.
	const SDICOS::DcsUniqueIdentifier uidSopInstanceCT(SDICOS::DcsGUID::GenerateAsDecimalString()); //Create a dummy SOP Instance UID for a CT scan. Replace this with a real scan's SOP Instance UID.
	const SDICOS::DcsUniqueIdentifier uidSopClassCT(SDICOS::SOPClassUID::GetCT());
	tdr.AddReferencedSopInstance(uidSopInstanceCT, uidSopClassCT);

	// Write the TDR to a file, read it from the file and compare the results.
	SDICOS::ErrorLog errorlog;
	SDICOS::Folder tdrFolder("TDRFiles");
	SDICOS::Filename tdrFilename(tdrFolder,"SimpleBaggageNoThreatTDR.dcs");

	if(!tdr.Write(tdrFilename,errorlog))
	{
		std::cerr << "Simple TDR Template Example unable to write DICOS File " << tdrFilename << std::endl;
		std::cerr << errorlog << std::endl;
		return false;
	}
	else
	{
		std::cout << "Wrote file to " << tdrFilename << std::endl;
		SDICOS::TDR tdrRead;
				
		SDICOS::ErrorLog errorlog;
		if(tdrRead.Read(tdrFilename,errorlog)) 
		{
			if(tdrRead == tdr) 
			{
				std::cout << "Successfully read and compared TDR files" << std::endl;
				return true;
			} 
			else 
			{
				std::cout << "TDR file loaded from " << tdrFilename << " does not match original." << std::endl;
				return false;
			}
		} 
		else 
		{
			std::cerr << "Unable to read DX file " << tdrFilename << std::endl;
			std::cerr << errorlog << std::endl;
			return false;
		}
	}
	return true;
} 
/// EndCreateNoThreatTDRForBaggageSimple

/// StartCreateTDRForBaggageSimple
/**
 Create a Threat Detection Report (TDR) generated from an ATR device
 for a piece of baggage with one Potential Threat Object (PTO).
 */
bool CreateTDRForBaggageSimple()
{
	/// Identifier for the TDR
	SDICOS::S_INT32 TDRInstanceNumber = 1234;
		
	/// The SDICOS.TemplateTDR.TDR object represents a TDR for a single Object Of Inspection (OOI)
	/// Create a Threat Detection Report (TDR) DICOS file for a piece of Baggage generated by an Automated Threat Recognition (ATR) Device.
	SDICOS::TDR tdr(
		SDICOS::ObjectOfInspectionModule::enumTypeBaggage,	// OOI is a piece of Baggage
		SDICOS::TDRTypes::ThreatDetectionReport::enumMachine,	// TDR was generated by an ATR machine
		TDRInstanceNumber	// Numeric identifier for the TDR
	);

	// Indicate the Date and Time TDR was created
	SDICOS::DcsDate TDRCreationStartDate = SDICOS::DcsDate::Today();
	SDICOS::DcsTime TDRCreationStartTime = SDICOS::DcsTime::Now();
	tdr.SetContentDateAndTime(TDRCreationStartDate,TDRCreationStartTime);
		
	// Set ATR Device information. Required by DICOS when TDR type is enumMachine
	SDICOS::DcsLongString atrManufacturer("Alchemy");
	SDICOS::DcsLongString atrVersion("0.999");
	
	//
	// Indicate parameters used to the initialize and run the ATR algorithm.
	// In this example, the ATR algorithm has two parameters.
	//
	SDICOS::Array1D<SDICOS::DcsLongString> ATR_Parameters(2);
	ATR_Parameters[0] = "-random=true";
	ATR_Parameters[1] = "-magic=true";
	tdr.SetTDRTypeATR(atrManufacturer,atrVersion,ATR_Parameters);
		
	// Image scaling factor is required for TDR Type = ATR
	// Indicate number of units on the 'human' that 1 unit in the image maps to.
	tdr.SetImageScaleRepresentation(10.0);
	
	// Indicate that an alarm was triggered
	tdr.SetAlarmDecision(SDICOS::TDRTypes::ThreatDetectionReport::enumAlarm);
	SDICOS::DcsDate alarmDecisionDate(1944,6,6);
	SDICOS::DcsTime alarmDecisionTime(6,30,0,0);
	tdr.SetAlarmDecisionDateTime(alarmDecisionDate,alarmDecisionTime);
		
	// The TDR generation succeeded
	tdr.SetAbortFlag(SDICOS::TDRTypes::ThreatDetectionReport::enumSuccess);
		
	////////////////////////////////////////////////////
	// One PTOs found by ATR that triggered an alarm
		
	// Optional parameter to track TDR processing time
	tdr.SetTotalProcessingTimeInMS(500.0f);
		
	// Add Two potential Threat Objects with one that caused an alarm.
	// Since the Object of Inspection Type (OOI Type) is 
	SDICOS::S_UINT16 PTOIdentifier0 = 9001;
	tdr.AddPotentialThreatObject(PTOIdentifier0, SDICOS::TDR::enumThreatTypeBaggage);
	
	// Add Threat Assessment information 
	tdr.AddPTOAssessment(
		PTOIdentifier0,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumThreat,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumProhibitedItem,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumNoInterference,
		"Flammable Liquid"
	);

	//Set mass and density of PTO
	tdr.SetBaggagePTODetails(PTOIdentifier0, 
		50.0f,		//Mass in grams
		7000.0f,	//Density in grams per CC
		0);			//Index for which PTO Representation Sequence Item
		
	SDICOS::Point3D<float> ptoDims(50,50,100);

	// Create a Bitmap for the PTO Mask. Must be the same size as PTO dimensions.
	// by default all bits are unset.
	SDICOS::Bitmap ptoMask(50,50,100);

	// The Bitmap data is packed into a MemoryBuffer object 1-bit per voxel
	// in standard c-style ordering. Use the GetBitmap() method to access the raw bitmap data.
	// SDICOS::MemoryBuffer& bitMask = ptoMask.GetBitmap();

	// In this example, fill in the Bitmap to indicate that the outside is solid and the inside is hollow.
	for(SDICOS::S_UINT32 d(0); d < ptoDims.z; ++d) 
	{
		if(d > 30 && d < 70) 
			continue;

		for(SDICOS::S_UINT32 h(0); h < ptoDims.y; ++h) 
		{
			if(h > 10 && h < 40) 
				continue;

			for(SDICOS::S_UINT32 w(0); w < ptoDims.x; ++w) 
			{
				SDICOS::S_UINT32 index = w + h*SDICOS::S_UINT32(ptoDims.x) + d*SDICOS::S_UINT32(ptoDims.x*ptoDims.y);
				bool value = (w > 10 && w < 20) ? false : true;
				ptoMask.SetBit(w, h, d, value);
				
				// verify bitmap using calculated index
				if (value != ptoMask.GetBit(index))
				{
					std::cerr << "Failed to validate threat bitmask (" << w << "," << h << "," << d << ")" << std::endl;
				}
			}
		}
	}

	// The Bitmap data is packed into a MemoryBuffer object 1-bit per voxel
	// in standard c-style ordering. Use the GetBitmap() method to access the raw data.
	//SDICOS::MemoryBuffer& bitMask = ptoMask.GetBitmap();

	// PTO Requires a Threat Region of Interest (TROI)
	// TROI is describe as a bounding box using a point and dimensions in pixels/voxels.
	tdr.SetThreatRegionOfInterest(
		PTOIdentifier0,
		SDICOS::Point3D<float>(12,23,45),
		ptoDims,
		ptoMask,
		0  // Index for which PTO Representation Sequence Item
	);
	
	// Required: Set the processing time for PTO 0
	SDICOS::DcsDateTime dateTime;
	dateTime.SetNow();
	// Total Processing time is in milliseconds
	tdr.SetPTOProcessingTime(PTOIdentifier0, dateTime, dateTime, 0.0f);

	// Required: Add a referenced instance to the original data used to make the threat assessment.
	// In this example, a CT Scan 
	// For a CT/DX etc, this should be the Scan Id.
	SDICOS::DcsUniqueIdentifier CTReferenceUID = "1235.23456.568678.34546";
	tdr.AddReferencedInstance(
		PTOIdentifier0,
		SDICOS::SOPClassUID::GetCT(), //When using an actual CT object, replace this param with CT::GetSopClassUID()
		CTReferenceUID,
		0  // Index for which PTO Representation Sequence Item
	);

	// Write the TDR to a file, read it from the file and compare the results.
	SDICOS::ErrorLog errorlog;
	SDICOS::Folder tdrFolder("TDRFiles");
	SDICOS::Filename tdrFilename(tdrFolder,"SimpleBaggageTDR.dcs");

	if(!tdr.Write(tdrFilename,errorlog))
	{
		std::cerr << "Simple TDR Template Example unable to write DICOS File " << tdrFilename << std::endl;
		std::cerr << errorlog << std::endl;
		return false;
	}
	else
	{
		std::cout << "Wrote file to " << tdrFilename << std::endl;
		SDICOS::TDR tdrRead;
				
		SDICOS::ErrorLog errorlog;
		if(tdrRead.Read(tdrFilename,errorlog))
		{
			if(tdrRead == tdr) 
			{
				std::cout << "Successfully read and compared TDR files" << std::endl;
				return true;
			} 
			else 
			{
				std::cout << "TDR file loaded from " << tdrFilename << " does not match original." << std::endl;
				return false;
			}
		} 
		else
		{
			std::cerr << "Unable to read DX file " << tdrFilename << std::endl;
			std::cerr << errorlog << std::endl;
			return false;
		}
	}
	return true;
} /// EndCreateTDRForBaggageSimple

/// StartCreateTDRWithMultiplePTOS

/**
 * Create a Threat Detection Report (TDR) generated from an ATR device
 * that contains two Potential Threat Objects (PTO).
 * One PTO triggers an alarm and the other does not.
 */
bool CreateTDRWithMultiplePTOS()
{
	/// Identifier for the TDR
	SDICOS::S_INT32 TDRInstanceNumber = 1234;
		
	/// Create a TDR DICOS file for a piece of Baggage generated by an Automated Threat Recognition (ATR) Device
	SDICOS::TDR tdr(
		SDICOS::ObjectOfInspectionModule::enumTypeBaggage,		// OOI is a piece of Baggage
		SDICOS::TDRTypes::ThreatDetectionReport::enumMachine,	// TDR was generated by an ATR machine
		TDRInstanceNumber	// Numeric identifier for the TDR
	);
		
	// Add Object of Inspection (OOI) information for identification purposes
	// Primary airport identification number or code for the OOI.
	// In an integrated environment such as an airport this number can come from
	// multiple locations included the baggage system, scanning device etc.
	SDICOS::DcsLongString OOIIdentifier = "12345-35345324-6326342-345";
	tdr.SetOOIID(OOIIdentifier);
	tdr.SetOOIIDAssigningAuthority("TSA");
	tdr.SetOOIIDType(SDICOS::ObjectOfInspectionModule::IdInfo::enumRFID);

	// Indicate the Date and Time TDR was created
	SDICOS::DcsDate TDRCreationStartDate = SDICOS::DcsDate::Today();
	SDICOS::DcsTime TDRCreationStartTime = SDICOS::DcsTime::Now();
	tdr.SetContentDateAndTime(TDRCreationStartDate,TDRCreationStartTime);
		
	// Set ATR Device information. Required by DICOS when TDR type is enumMachine
	SDICOS::DcsLongString atrManufacturer("Alchemy");
	SDICOS::DcsLongString atrVersion("0.999");
	
	//
	// Indicate parameters used to the initialize and run the ATR algorithm.
	// In this example, the ATR algorithm has two parameters.
	//
	SDICOS::Array1D<SDICOS::DcsLongString> ATR_Parameters(2);
	ATR_Parameters[0] = "-random=true";
	ATR_Parameters[1] = "-magic=true";
	tdr.SetTDRTypeATR(atrManufacturer,atrVersion,ATR_Parameters);
		
	// Image scaling factor is required for TDR Type = ATR
	// Indicate number of units on the 'human' that 1 unit in the image maps to.
	tdr.SetImageScaleRepresentation(10.0);
	
	// Indicate that an alarm was triggered
	tdr.SetAlarmDecision(SDICOS::TDRTypes::ThreatDetectionReport::enumAlarm);
	SDICOS::DcsDate alarmDecisionDate(1944,6,6);
	SDICOS::DcsTime alarmDecisionTime(6,30,0,0);
	tdr.SetAlarmDecisionDateTime(alarmDecisionDate,alarmDecisionTime);
		
	// The TDR generation succeeded
	tdr.SetAbortFlag(SDICOS::TDRTypes::ThreatDetectionReport::enumSuccess);
		
	/////////////////////////////////////////////////////
	// Two PTOs found by ATR, one triggered an alarm.
		
	// Optional parameter to track TDR processing time
	tdr.SetTotalProcessingTimeInMS(500.0f);
		
	// Add Two potential Threat Objects with one that caused an alarm.
	// Since the Object of Inspection Type (OOI Type) is 
	SDICOS::S_UINT16 PTOIdentifier0 = 9001;
	tdr.AddPotentialThreatObject(PTOIdentifier0, SDICOS::TDR::enumThreatTypeBaggage);
	
	// Add Threat Assessment information 
	tdr.AddPTOAssessment(
		PTOIdentifier0,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumHighThreat,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumProhibitedItem,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumNoInterference,
		"Flammable Liquid"
	);

	//Set mass and density of PTO
	tdr.SetBaggagePTODetails(PTOIdentifier0,
		50.0f,		//Mass in grams
		7000.0f,	//Density in grams per CC
		0);			//Index for which PTO Representation Sequence Item
		
	// PTO Requires a Threat Region of Interest (TROI)
	// TROI is describe as a bounding box using a point and dimensions in pixels/voxels.
	tdr.SetThreatRegionOfInterest(
		PTOIdentifier0,
		SDICOS::Point3D<float>(12,23,45),
		SDICOS::Point3D<float>(50,50,100),
		SDICOS::Bitmap(),  // Indicates the entire region is defined as the PTO
		0  // Index for which PTO Representation Sequence Item
	);

	// Required: Set the processing time for PTO 0
	SDICOS::DcsDateTime dateTime;
	dateTime.SetNow();
	// Total Processing time is in milliseconds
	tdr.SetPTOProcessingTime(PTOIdentifier0, dateTime, dateTime, 0.0f);
	
	// Add second PTO that was determined no to be a threat.
	SDICOS::S_UINT16 PTOIdentifier1 = 2002;
	tdr.AddPotentialThreatObject(PTOIdentifier1, SDICOS::TDR::enumThreatTypeBaggage);
		
	// Add Threat Assessment information indicating that the PTO was cleared
	tdr.AddPTOAssessment(
		PTOIdentifier1,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumNoThreat
	);

	//Set mass and density of PTO
	tdr.SetBaggagePTODetails(PTOIdentifier1,
		100.0f,		//Mass in grams
		40.0f,		//Density in grams per CC
		0);			//Index for which PTO Representation Sequence Item

	// PTO Requires a Threat Region of Interest (TROI)
	// TROI is describe as a bounding box using a point and dimensions in pixels/voxels.
	tdr.SetThreatRegionOfInterest(
		PTOIdentifier1,
		SDICOS::Point3D<float>(1,23,95),
		SDICOS::Point3D<float>(22,33,444),
		SDICOS::Bitmap(),  // Indicates the entire region is defined as the PTO
		0  // Index for which PTO Representation Sequence Item
	);
	
	// Required: Set the processing time for PTO 1
	// Total Processing time is in milliseconds
	tdr.SetPTOProcessingTime(PTOIdentifier1, dateTime, dateTime, 0.0f);

	// Optional: A bounding polygon can be specified for on screen display purposes.
	SDICOS::TDR::BoundingPolygon bp;
	bp.SetSize(3);
	bp[0].Set(1,2,3);
	bp[1].Set(3,4,5);
	bp[2].Set(5,6,7);
	tdr.SetThreatBoundingPolygon(PTOIdentifier1, bp, 0 /* Index for which PTO Representation Sequence Item */);

	// Required: Add a referenced instance to the original data used to make the threat assessment.
	// In this example, a CT Scan 
	// For a CT/DX etc, this should be the Scan Id.
	SDICOS::DcsUniqueIdentifier CTReferenceUID = "1235.23456.568678.34546";
	tdr.AddReferencedInstance(
		PTOIdentifier0,
		SDICOS::SOPClassUID::GetCT(),//When using an actual CT object, replace this param with CT::GetSopClassUID()
		CTReferenceUID,
		0  // Index for which PTO Representation Sequence Item
	);
		
	tdr.AddReferencedInstance(
		PTOIdentifier1,
		SDICOS::SOPClassUID::GetCT(),//When using an actual CT object, replace this param with CT::GetSopClassUID()
		CTReferenceUID,
		0  // Index for which PTO Representation Sequence Item
	);
		
	// Write the TDR to a file, read it from the file and compare the results.
	SDICOS::ErrorLog errorlog;
	SDICOS::Folder tdrFolder("TDRFiles");
	SDICOS::Filename tdrFilename(tdrFolder,"MultiplePTOsTDR.dcs");

	if(!tdr.Write(tdrFilename,errorlog))
	{
		std::cerr << "Simple TDR Template Example unable to write DICOS File " << tdrFilename << std::endl;
		std::cerr << errorlog << std::endl;
		return false;
	}
	else
	{
		std::cout << "Wrote file to " << tdrFilename << std::endl;
		SDICOS::TDR tdrRead;
				
		SDICOS::ErrorLog errorlog;
		if(tdrRead.Read(tdrFilename,errorlog)) 
		{
			if(tdrRead == tdr) 
			{
				std::cout << "Successfully read and compared TDR files" << std::endl;
				return true;
			} 
			else
			{
				std::cout << "TDR file loaded from " << tdrFilename << " does not match original." << std::endl;
				return false;
			}
		} 
		else
		{
			std::cerr << "Unable to read TDR file " << tdrFilename << std::endl;
			std::cerr << errorlog << std::endl;
			return false;
		}
	}
	return true;
} /// EndCreateTDRWithMultiplePTOS

/// StartCreateTDRForPersonSimple

/**
 * Create a Threat Detection Report (TDR) generated from an ATR device
 * for a person with multiple threats.
 * @return 
 */
bool CreateTDRForPersonSimple()
{
	/// Identifier for the TDR
	SDICOS::S_INT32 TDRInstanceNumber = 78568;
	SDICOS::DcsDate TDRCreationStartDate = SDICOS::DcsDate::Today();
	SDICOS::DcsTime TDRCreationStartTime = SDICOS::DcsTime::Now();
		
	/// Create a TDR DICOS file for Female person generated by an ATR machine
	/// indicating the numeric identifier for the PTO and the
	/// date and time the TDR data creation started.
	SDICOS::TDR tdr(
		SDICOS::ObjectOfInspectionModule::enumGenderFemale,
		SDICOS::TDRTypes::ThreatDetectionReport::enumMachine,
		TDRInstanceNumber,
		TDRCreationStartDate,
		TDRCreationStartTime
	);

	// Set ATR Device information. Required by DICOS when TDR type is enumMachine.
	SDICOS::DcsLongString atrManufacturer("Alchemy");
	SDICOS::DcsLongString atrVersion("0.999");
	
	//
	// Indicate parameters used to the initialize and run the ATR algorithm.
	// In this example, the ATR algorithm has two parameters.
	//
	SDICOS::Array1D<SDICOS::DcsLongString> ATR_Parameters(2);
	ATR_Parameters[0] = "-random=true";
	ATR_Parameters[1] = "-magic=true";
	
	// Set ATR Manufacturer, version and parameters
	tdr.SetTDRTypeATR(atrManufacturer,atrVersion,ATR_Parameters);
		
	// Image scaling factor is required for TDR Type = ATR
	// Indicate number of units on the 'human' that 1 unit in the image maps to.
	tdr.SetImageScaleRepresentation(10.0);
	
	// Indicate the date and time that an alarm was triggered by the ATR system
	tdr.SetAlarmDecision(SDICOS::TDRTypes::ThreatDetectionReport::enumAlarm);
	SDICOS::DcsDate alarmDecisionDate(1944,6,6);
	SDICOS::DcsTime alarmDecisionTime(6,30,0,0);
	tdr.SetAlarmDecisionDateTime(alarmDecisionDate,alarmDecisionTime);
		
	// Optional: By default the Abort Flag is set to success
	// so this method is only needed when the TDR creation failed.
	tdr.SetAbortFlag(SDICOS::TDRTypes::ThreatDetectionReport::enumSuccess);
		
	///////////////////////////////////////////////////////////////////////////////////
	// Indicate that two PTOs found by the ATR device that both triggered an alarm
		
	// Optional parameter to track TDR processing time
	tdr.SetTotalProcessingTimeInMS(500.0f);

	// Add the information for the two potential Threat Objects.
	// Since the TDR Object of Inspection Type (OOI Type) is a person, the PTOs are of type Person.
	// The information for each PTO contains an assessment of the kind of threat
	// the Region of Interest (ROI) bounding volume around the PTO and
	// anomaly locater positions intended for on-screen display.
	SDICOS::S_UINT16 PTOIdentifier0 = 9001;
	tdr.AddPotentialThreatObject(PTOIdentifier0, SDICOS::TDR::enumThreatTypePerson);
	
	// Add Threat Assessment information 
	tdr.AddPTOAssessment(
		PTOIdentifier0,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumThreat,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumProhibitedItem,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumNoInterference,
		"blade"
	);
		
	// Required: The PTO requires a Threat Region of Interest (TROI)
	// which is as a bounding box using a point and dimensions in pixels/voxels.
	tdr.SetThreatRegionOfInterest(
		PTOIdentifier0,
		SDICOS::Point3D<float>(12,23,45),
		SDICOS::Point3D<float>(50,50,100),
		SDICOS::Bitmap(),  // Indicates the entire region is defined as the PTO
		0  // Index for which PTO Representation Sequence Item
	);

	// Required: Set the processing time for PTO 0
	SDICOS::DcsDateTime dateTime;
	dateTime.SetNow();
	// Total Processing time is in milliseconds
	tdr.SetPTOProcessingTime(PTOIdentifier0, dateTime, dateTime, 0.0f);

	// Required: Add Anomaly Locator Indicators (ALI) with the (x,y,z) image coordinates
	// for the center of each ALI. Intended for on-screen presentation.
	// For this example, the ATR identified a PTO with two pieces.
	SDICOS::Point3D<float> AnomalyLocator0(32,30,80);
	tdr.AddPersonAnomalyIndicator(PTOIdentifier0, AnomalyLocator0, 0 /* Index for which PTO Representation Sequence Item */);
		
	SDICOS::Point3D<float> AnomalyLocator1(40,40,50);
	tdr.AddPersonAnomalyIndicator(PTOIdentifier0, AnomalyLocator1, 0 /* Index for which PTO Representation Sequence Item */);
		
	// Optional: Add person specific information about the threat
	tdr.SetPersonPTOLocationDescription(PTOIdentifier0, "two metal blades in left pant pocket", 0 /* Index for which PTO Representation Sequence Item */);

	// Required: Add a referenced instance to the original data used to make the threat assessment.
	// In this example, an AIT 3D Scan is referenced
	// For a CT/DX etc, this should be the Scan Id.
	SDICOS::DcsUniqueIdentifier AIT3DReferenceUID = "1235.23456.568678.34546";
	tdr.AddReferencedInstance(
		PTOIdentifier0,
		SDICOS::SOPClassUID::GetAIT3D(),//When using an actual AIT3D object, replace this param with AIT3D::GetSopClassUID()
		AIT3DReferenceUID,
		0  // Index for which PTO Representation Sequence Item
	);

	// Add information for a second PTO on the person
	// Add the information for the two potential Threat Objects.
	// Since the TDR Object of Inspection Type (OOI Type) is a person, the PTOs are of type []
	SDICOS::S_UINT16 PTOIdentifier1 = 9002;
	tdr.AddPotentialThreatObject(PTOIdentifier1, SDICOS::TDR::enumThreatTypePerson);
	
	// Add Threat Assessment information 
	tdr.AddPTOAssessment(
		PTOIdentifier1,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumHighThreat,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumContraband,
		SDICOS::TDRTypes::AssessmentSequence::AssessmentItem::enumNoInterference,
		"narcotics",
		0  // Index for which PTO Representation Sequence Item
	);
		
	// PTO Requires a Threat Region of Interest (TROI)
	// TROI is describe as a bounding box using a point and dimensions in pixels/voxels.
	tdr.SetThreatRegionOfInterest(
		PTOIdentifier1,
		SDICOS::Point3D<float>(120,230,450),
		SDICOS::Point3D<float>(70,80,100),
		SDICOS::Bitmap(),  // Indicates the entire region is defined as the PTO
		0  // Index for which PTO Representation Sequence Item
	);

	// Required: Set the processing time for PTO 1
	// Total Processing time is in milliseconds
	tdr.SetPTOProcessingTime(PTOIdentifier1, dateTime, dateTime, 0.0f);
	// Required: Add Anomaly Locator Indicators (ALI) with the (x,y,z) image coordinates
	// for the center of each ALI. Intended for on-screen presentation.
	SDICOS::Point3D<float> AnomalyLocator3(150,300,500);
	tdr.AddPersonAnomalyIndicator(PTOIdentifier1, AnomalyLocator3, 0 /* Index for which PTO Representation Sequence Item */);
		
	// Optional: Add person specific information about the threat
	tdr.SetPersonPTOLocationDescription(PTOIdentifier0, "pills in right pant leg", 0 /* Index for which PTO Representation Sequence Item */);

	// Required: Add a referenced instance to the original data used to make the threat assessment.
	// In this example, the same AIT 3D Scan for PTOIdentifier0 is referenced.
	tdr.AddReferencedInstance(
		PTOIdentifier1,
		SDICOS::SOPClassUID::GetAIT3D(),//When using an actual AIT3D object, replace this param with AIT3D::GetSopClassUID()
		AIT3DReferenceUID,
		0  // Index for which PTO Representation Sequence Item
	);

		
	// Write the TDR to a file, read it from the file and compare the results.
	SDICOS::ErrorLog errorlog;
	SDICOS::Folder tdrFolder("TDRFiles");
	SDICOS::Filename tdrFilename(tdrFolder,"SimplePersonTDR.dcs");

	if(!tdr.Write(tdrFilename,errorlog))
	{
		std::cerr << "Simple TDR Template Example unable to write DICOS File " << tdrFilename << std::endl;
		std::cerr << errorlog << std::endl;
		return false;
	}
	else
	{
		std::cout << "Wrote file to " << tdrFilename << std::endl;
		SDICOS::TDR tdrRead;
				
		SDICOS::ErrorLog errorlog;
		if(tdrRead.Read(tdrFilename,errorlog)) {
			if(tdrRead == tdr) {
				std::cout << "Successfully read and compared TDR files" << std::endl;
				return true;
			} else {
				std::cout << "TDR file loaded from " << tdrFilename << " does not match original." << std::endl;
				return false;
			}
		} 
		else {
			std::cerr << "Unable to read TDR file " << tdrFilename << std::endl;
			std::cerr << errorlog << std::endl;
			return false;
		}
	}
	return true;
    return true;
} /// EndCreateTDRForPersonSimple

#ifndef _STRATOVAN_DICOS_H_
    #include "SDICOS/DICOS.h"
#endif

int main()
{
	bool b = CreateNoThreatTDRForBaggageSimple();
	b = CreateTDRForBaggageSimple() && b;
	b = CreateTDRWithMultiplePTOS() && b;
	b = CreateTDRForPersonSimple() && b;
    return (b ? 0 : 1);
}

/// EndCreateTDRExamples
