//////////////////////////////////////////////////////////////////////////////
/// Stratovan Corporation Copyright and Disclaimer Notice:
///
/// Copyright (c) 2014 Stratovan Corporation. All Rights Reserved.
///
/// Permission to use, copy, modify, and distribute this software and its
/// documentation without a signed licensing agreement, is hereby granted,
/// provided that this copyright notice, this paragraph and the following two
/// paragraphs appear in all copies, modifications, and distributions.
///
/// IN NO EVENT SHALL STRATOVAN BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
/// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
/// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
/// STRATOVAN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///
/// STRATOVAN SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED
/// TO, THE IMPLIED WARRANTIES OF USE AND FITNESS FOR A PARTICULAR PURPOSE. THE
/// SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS
/// PROVIDED "AS IS". STRATOVAN HAS NO OBLIGATION TO PROVIDE MAINTENANCE,
/// SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS UNLESS DIRECTED BY THE
/// U.S. GOVERNMENT'S TRANSPORTATION SECURITY ADMINISTRATION (TSA).
///
//////////////////////////////////////////////////////////////////////////////
#ifndef _STRATOVAN_DICOS_CHEMICAL_CODE_SEQUENCE_H_
#define _STRATOVAN_DICOS_CHEMICAL_CODE_SEQUENCE_H_

#include "SDICOS/CodeSequence.h"

namespace SDICOS
{

///
/// \class ChemicalCodeSequence
/// \brief Implements a specialized code sequence for chemical compounds with context ID set to "DCS1" and scheme designator set to "IUPC"
/// SPECREF V03 Section 17.3.1, Table 133
///
/// Context ID = "DCS1"
/// Scheme Designator = "IUPC"
class ChemicalCodeSequence : public ExtendedCodeSequence
{
public:

	/// Constructor
	ChemicalCodeSequence();
	/// Copy constructor
	ChemicalCodeSequence(const ChemicalCodeSequence &chemicalcodesequence);
	/// Destructor
	~ChemicalCodeSequence();

	/// Reset to default values
	virtual void FreeMemory();

	/// Copy operator
	ChemicalCodeSequence& operator=(const ChemicalCodeSequence &chemicalcodesequence);
	/// Comparison operator
	bool operator==(const ChemicalCodeSequence &chemicalcodesequence)const;
	/// Comparison operator
	bool operator!=(const ChemicalCodeSequence &chemicalcodesequence)const;

	/// Comparison operator
	bool operator==(const ExtendedCodeSequence &codesequence)const;
	/// Comparison operator
	bool operator!=(const ExtendedCodeSequence &codesequence)const;

	/// Set the chemical compound following the InChI format
	/// @param strInChIKey Must be set to a 27 character key generated by InChI software. (Extended Code Value (0008, 0101) [required])
	/// @param strInChICompound Must be set to the full standard InChI value of the compound. String starts with "InChI=1S/", where "1" is the InChI version number and "S" indicates standard InChI. (Extended Code Meaning (0008, 0104), VR = LT [required])
	bool SetInChI(const DcsLongString &strInChIKey, const DcsLongString &strInChICompound);
	///@see SetInChI
	DcsString GetInChIKey()const;
	///@see SetInChI
	DcsString GetInChICompound()const;

protected:
	/// Extended Code Value : Tag (0008, 0101), VR = LO [required]
	/// Replaced with SetInChI()
	virtual bool SetExtendedCodeValue(const DcsLongString &strExtendedCodeValue);
	/// Extended Code Meaning : Tag (0008, 0104), VR = LT [required]
	/// Replaced with SetInChI()
	virtual bool SetExtendedCodeMeaning(const DcsLongText &strExtendedCodeMeaning);

	/// Code Scheme Designator : Tag (0008, 0102), VR = SH [required]
	/// Set to "IUPC"
	virtual bool SetSchemeDesignator(const DcsShortString& strSchemeDesignator);

	/// Context Identifier : Tag (0008, 010F), VR = CS [optional]
	/// Set to "DCS1"
	virtual bool SetContextID(const DcsCodeString& strContextID);
};

}

#endif
