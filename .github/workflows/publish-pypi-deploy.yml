name: publish-pypi

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Run tests and coverage upload
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        bits : [ '64' ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Download DICOS installer
      env:
        AWS_DEFAULT_REGION: 'eu-west-3'
        AWS_ACCESS_KEY_ID: ${{ secrets.DICOS_S3_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DICOS_S3_SECRET }}
      run: |
        aws s3 cp s3://dicos-installer/sdicos_lin_ubuntu-20-${{ matrix.bits }}b_r20230925_${{ matrix.bits }}b.run installer.run
        chmod +x installer.run

    - name: Install DICOS
      run: |
        ./installer.run --unattendedmodeui none --mode unattended --prefix /opt/stratovan/sdicos
        chmod 755 -R /opt/stratovan/sdicos

    - name: Build
      run: |
        pip install -r requirements.txt
        chmod +x setup.sh
        ./setup.sh

    - name: Run tests
      run: |
        pip install dist/$(ls dist/ | head -1)
        pip install pytest pytest-cov pytest-xprocess pytest-order
        pytest --cov-report=xml --cov=pydicos tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5.0.2
      with:
        files: ./coverage.xml
        env_vars: inputs.os, inputs.python-version
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  build:
    name: Build distribution üì¶
    runs-on: ${{ matrix.os }}
    needs:
    - test
    env:
      CIBW_BEFORE_BUILD: rm -rf {package}/build
      CIBW_ENVIRONMENT: SDICOS_PATH=/opt/stratovan/sdicos
      CIBW_BUILD_FRONTEND: build
      CIBW_BEFORE_ALL: ./installer.run --unattendedmodeui none --mode unattended --prefix /opt/stratovan/sdicos && chmod 755 -R /opt/stratovan/sdicos
      CIBW_TEST_REQUIRES: pytest pytest-xprocess pytest-order
      CIBW_TEST_COMMAND: pytest {package}/tests/
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: 'x86_64'
            bits: '64'
          # NO aarch64 binaries provided for the DICOS toolkit
          # - os: ubuntu-latest
          #   cibw_archs: 'aarch64'
          #   bits: '64'

    steps:
    - name: Set up QEMU
      if: matrix.cibw_archs == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Checkout
      uses: actions/checkout@v4

    - name: Download DICOS installer
      env:
        AWS_DEFAULT_REGION: 'eu-west-3'
        AWS_ACCESS_KEY_ID: ${{ secrets.DICOS_S3_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DICOS_S3_SECRET }}
      run: |
        aws s3 cp s3://dicos-installer/sdicos_lin_ubuntu-20-${{ matrix.bits }}b_r20230925_${{ matrix.bits }}b.run installer.run
        chmod +x installer.run

    - name: Build wheels for CPython 3.11
      uses: pypa/cibuildwheel@v2.19.2
      with:
        config-file: pyproject.toml
      env:
        CIBW_BUILD: cp311-manylinux_${{ matrix.cibw_archs }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}

    - name: Build wheels for CPython 3.10
      uses: pypa/cibuildwheel@v2.19.2
      with:
        config-file: pyproject.toml
      env:
        CIBW_BUILD: cp310-manylinux_${{ matrix.cibw_archs }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}

    - name: Build wheels for CPython 3.9
      uses: pypa/cibuildwheel@v2.19.2
      with:
        config-file: pyproject.toml
      env:
        CIBW_BUILD: cp39-manylinux_${{ matrix.cibw_archs }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}

    - name: Build wheels for CPython 3.8
      uses: pypa/cibuildwheel@v2.19.2
      with:
        config-file: pyproject.toml
      env:
        CIBW_BUILD: cp38-manylinux_${{ matrix.cibw_archs }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}

    - name: Build wheels for CPython 3.7
      uses: pypa/cibuildwheel@v2.19.2
      with:
        config-file: pyproject.toml
      env:
        CIBW_BUILD: cp37-manylinux_${{ matrix.cibw_archs }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: wheelhouse/*.whl

  publish-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    if : ${{ github.event_name != 'push' || github.ref != 'refs/heads/main' }}
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: test
      url: https://test.pypi.org/p/pyDICOS

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist
        merge-multiple: true

    - name : publish to testpypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    if : ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/pydicos

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist
          merge-multiple: true

      - name: publish to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
